{
	 "description":"ADME_RATED_OCS_SCRATCH",
	 "sqlStatements": [
	  {
		"sql"      	:"
						SELECT  
						*
						FROM
						(
							SELECT * ,
							ROW_NUMBER() OVER(PARTITION BY A.ACC_REF, A.SCNUM ORDER BY ABS(A.TIME_SA - B.TIME_SB),B.TIME_SB - A.TIME_SA ) AS ROW_NUM
							FROM
							(
								SELECT  ACC_REF , AMOUNT, concat_ws(' ',date_use,time_use) dt_use, UNIX_TIMESTAMP(concat_ws(' ',date_use,time_use),'dd/MM/yyyy HH:mm:ss') as TIME_SA, SCNUM, ftp_filename 
								FROM MBF_DATALAKE.SCRATCH AA
								LEFT JOIN MBF_DATALAKE.SCRATCH_PROFILE BB ON AA.SCRPREF = BB.RI
								WHERE DAY_KEY = '$day_key'
							) A
							LEFT JOIN
							(
								SELECT UNIX_TIMESTAMP(EVT_START_DT,'yyyy-MM-dd HH:mm:ss') AS TIME_SB , SERVICE_NBR AS ISDN ,
									FIRST_CELL_KEY AS CELL_ID,FIRST_CELL_CD,FIRST_CELL_SITE_KEY,FIRST_CELL_SITE_CD,CELL_TYP_CD FIRST_CELL_TYP_CD,NTWK_MGNT_CENTRE_KEY ,NTWK_MGNT_CENTRE_CD ,
									BSNS_RGN_KEY,BSNS_RGN_CD,BSNS_CLUSTER_KEY,BSNS_CLUSTER_CD,BSNS_MINICLUSTER_KEY ,BSNS_MINICLUSTER_CD ,GEO_CNTRY_KEY,GEO_CNTRY_CD,
									GEO_STATE_KEY,GEO_STATE_CD,GEO_DSTRCT_KEY,GEO_DSTRCT_CD,GEO_CITY_KEY,GEO_CITY_CD
									
								FROM MBF_BIGDATA.ADME_RAW_DATA_CDR 
								WHERE DAY_KEY = '$day_key'  AND FIRST_CELL_KEY IS NOT NULL 
								UNION ALL 
								SELECT UNIX_TIMESTAMP(EVT_START_DT,'yyyy-MM-dd HH:mm:ss') AS TIME_SB, SERVICE_NBR AS ISDN,
									FIRST_CELL_KEY AS CELL_ID,FIRST_CELL_CD,FIRST_CELL_SITE_KEY,FIRST_CELL_SITE_CD, FIRST_CELL_TYP_CD,NTWK_MGNT_CENTRE_KEY ,NTWK_MGNT_CENTRE_CD ,
									BSNS_RGN_KEY,BSNS_RGN_CD,BSNS_CLUSTER_KEY,BSNS_CLUSTER_CD,BSNS_MINICLUSTER_KEY ,BSNS_MINICLUSTER_CD ,GEO_CNTRY_KEY,GEO_CNTRY_CD,
									GEO_STATE_KEY,GEO_STATE_CD,GEO_DSTRCT_KEY,GEO_DSTRCT_CD,GEO_CITY_KEY,GEO_CITY_CD
									
								FROM MBF_BIGDATA.ADME_RAW_GSM_CALL_CDR  
								WHERE day_key = '$day_key'  AND FIRST_CELL_KEY IS NOT NULL 
							) B ON A.ACC_REF = B.ISDN
							
						) C WHERE C.ROW_NUM = 1
											 ",
		"tempTable"  : "SCRATCH_ENRICH_TMP",
		"countSourceRecord":"0"
	  } ,
	 {
		"sql"      	:"

				SELECT 
						cast(from_unixtime(unix_timestamp(c.DT_USE,'dd/MM/yyyy HH:mm:ss'),'yyyyMM')	as integer) as	MO_KEY,
						cast(from_unixtime(unix_timestamp(c.DT_USE,'dd/MM/yyyy HH:mm:ss'),'HH')	as integer) as	HOUR_KEY,
						cast(null as string)	as	UUID,
						cast(c.scnum as string) 	as OCS_TXN_CD,
						cast(from_unixtime(unix_timestamp(c.DT_USE,'dd/MM/yyyy HH:mm:ss'))	as timestamp)		as	OCS_TXN_DT,
						cast(null as timestamp)	as	BLLG_START_DT,
						c.ftp_filename 			as	FILE_NAME,
						cast(null as timestamp)	as	FILE_DT,
						cast(null as string)	as	FILE_PREFIX_CD,
						cast(from_unixtime(unix_timestamp(c.DT_USE,'dd/MM/yyyy HH:mm:ss'))	as timestamp)		AS REC_PROCESS_DT,
						cast(null as string)	as	OCS_SWITCH_CD,
						D.ACCT_SRVC_INSTANCE_KEY as	ACCT_SRVC_INSTANCE_KEY,
						C.ACC_REF 				as SERVICE_NBR,
						D.ACCT_KEY 				as ACCT_KEY,
						D.BILLABLE_ACCT_KEY 	as BILLABLE_ACCT_KEY,
						D.CUST_KEY 				AS CUST_KEY,
						D.CUST_TYP_CD 			AS CUST_TYP_CD,
						D.NTWK_QOS_GRP_CD 		AS NTWK_QOS_GRP_CD,
						D.ACTIVATION_DT 		AS ACCT_ACTIVATION_DT,
						D.CBS_ACTIVATION_DT		AS ACCT_CBS_ACTIVATION_DT,
						D.LFCYCL_STAT_CD 		AS ACCT_LFCYCL_STAT_CD,
						D.ACTIVATION_DT 		AS SRVC_ACTIVATION_DT,
						D.CBS_ACTIVATION_DT		AS SRVC_CBS_ACTIVATION_DT,
						D.LFCYCL_STAT_CD 		AS SRVC_LFCYCL_STAT_CD,
						D.PROD_LINE_KEY 		AS PROD_LINE_KEY,
						D.USAGE_PLAN_KEY 		AS USAGE_PLAN_KEY,
						D.USAGE_PLAN_CD 		AS USAGE_PLAN_CD,
						D.USAGE_PLAN_TYP_CD 	AS USAGE_PLAN_TYP_CD,
						D.CORPORATE_IND			AS CORPORATE_IND,
						D.CRM_OFFER_KEY 		AS OFFER_KEY,
						D.CRM_OFFER_CD 			AS OFFER_CD,
						CAST(NULL AS DECIMAL(20,0)) AS PROD_KEY,
						CAST(NULL AS STRING) 	AS 	PROD_CD,
						'RECHARGE' 				AS EVT_CLASS_CD,
						'RCHRG_TOPUP' 			AS EVT_CTGRY_CD,
						(CASE 
								WHEN C.FROM_SERIAL_SCR  IS NOT NULL AND C.SCR_TYPE = 'THE_CAO' then 'RCHRG_TOPUP_VCHR'
								WHEN C.FROM_SERIAL_SCR  IS NOT NULL AND C.SCR_TYPE = 'MA_THE' then 'RCHRG_TOPUP_CODE' 
								ELSE 'UNKNOWN'
						END) 					AS EVT_TYP_CD,
						c.RCHRG_CHNL_TYP_CD 	AS CHNL_TYP_CD,
						CAST(NULL AS STRING) 	AS CHNL_CD,
						'CASH_CARD'				AS OCS_TXN_TYP_CD,
						CAST(NULL AS STRING) 	AS BAL_TRNSFR_TYP_CD,
						'Successful' 			AS OCS_TXN_STAT_CD,
						'0' 					AS OCS_TXN_STAT_RSN_CD,
						(SELECT cast(EXTRNL_CSP_KEY as integer) FROM MBF_BIGDATA.ADMR_EXTERNAL_CSP where EXTRNL_CSP_CD = 'VNMMO' AND DAY_KEY = '$day_key')	AS BLLG_OPRTR_KEY,
						'VNMMO' 				AS BLLG_OPRTR_CD,
						CAST(NULL AS STRING) 	AS TRNSFEROR_OCS_ACCT_REF,
						cast(G.BSNS_OUTLET_KEY as integer) AS TRNSFEROR_BSNS_OUTLET_KEY,
						G.BSNS_OUTLET_CD 		AS TRNSFEROR_BSNS_OUTLET_CD,
						G.MOBILE_PHONE_NBR 		AS TRNSFEROR_SERVICE_NBR,
						CAST(NULL AS STRING) 	AS TRNSFEREE_OCS_ACCT_REF,
						cast(D.ACQSTN_BSNS_OUTLET_KEY as integer) AS TRNSFEREE_BSNS_OUTLET_KEY,
						D.ACQSTN_BSNS_OUTLET_CD AS TRNSFEREE_BSNS_OUTLET_CD,
						D.SERVICE_NBR 			AS TRNSFEREE_SERVICE_NBR,
						CAST(NULL AS STRING) 	AS VCHR_BATCH_NBR,
						C.SCNUM 				AS VCHR_SRL_NBR_FROM,
						C.SCNUM 				AS VCHR_SRL_NBR_TO,
						CAST(NULL AS STRING) 	AS CARD_GRP_INFO,
						CAST(NULL AS STRING) 	AS VCHR_PRTNR_INFO,
						CAST(NULL AS STRING) 	AS REF_INVOICE_NBR,
						CAST(NULL AS TIMESTAMP) AS REF_INVOICE_DT,
						cast(c.AMOUNT as decimal(27,8)) AS OCS_TXN_AMT,
						CAST(NULL AS decimal(27,8)) AS RVN_AMT,
						CAST(NULL AS decimal(27,8)) AS TAX_AMT,
						cast(C.AMOUNT as decimal(27,8)) AS FACE_VALUE_AMT,
						'0' 					AS PYMT_IND,
						CAST(NULL AS decimal(27,8)) AS COMMISSION_AMT,
						CAST(NULL AS decimal(27,8)) AS TRNSFEROR_OCS_ACCT_BAL_BFR,
						CAST(NULL AS decimal(27,8)) AS TRNSFEROR_OCS_ACCT_BAL_AFTR,
						CAST(NULL AS decimal(27,8)) AS TRNSFEREE_OCS_ACCT_BAL_BFR,
						CAST(NULL AS decimal(27,8)) AS TRNSFEREE_OCS_ACCT_BAL_AFTR,
						CAST(NULL AS STRING) 	AS CHARGING_REQUEST_INFO,
						CAST(NULL AS STRING) 	AS CHARGING_RESPONSE_INFO,
						CAST(NULL AS STRING) 	AS ORIGINAL_GCI_CD,
						CAST(NULL AS decimal(27,8)) AS ADDR_LAT,
						CAST(NULL AS decimal(27,8)) AS ADDR_LON,
						(CASE WHEN C.CELL_ID IS NULL  THEN S.LAST_ACTIVITY_CELL_KEY ELSE C.CELL_ID END) 				AS CELL_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.CELL_CD ELSE C.FIRST_CELL_CD END) 							AS CELL_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.CELL_SITE_KEY ELSE C.FIRST_CELL_SITE_KEY END)				AS CELL_SITE_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.CELL_SITE_CD  ELSE C.FIRST_CELL_SITE_CD END)				AS CELL_SITE_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.CELL_TYP_CD  ELSE C.FIRST_CELL_TYP_CD END)					AS CELL_TYP_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.NTWK_MGNT_CENTRE_KEY ELSE C.NTWK_MGNT_CENTRE_KEY END) 		AS NTWK_MGNT_CENTRE_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.NTWK_MGNT_CENTRE_CD ELSE C.NTWK_MGNT_CENTRE_CD END)		AS NTWK_MGNT_CENTRE_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.BSNS_RGN_KEY ELSE C.BSNS_RGN_KEY END)						AS BSNS_RGN_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.BSNS_RGN_CD ELSE C.BSNS_RGN_CD END)						AS BSNS_RGN_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.BSNS_CLUSTER_KEY ELSE C.BSNS_CLUSTER_KEY END)				AS BSNS_CLUSTER_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.BSNS_CLUSTER_CD ELSE C.BSNS_CLUSTER_CD END)				AS BSNS_CLUSTER_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.BSNS_MINICLUSTER_KEY ELSE C.BSNS_MINICLUSTER_KEY END) 		AS BSNS_MINICLUSTER_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.BSNS_MINICLUSTER_CD ELSE C.BSNS_MINICLUSTER_CD END)		AS BSNS_MINICLUSTER_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_CNTRY_KEY ELSE C.GEO_CNTRY_KEY END)					AS GEO_CNTRY_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_CNTRY_CD ELSE C.GEO_CNTRY_CD END)						AS GEO_CNTRY_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_STATE_KEY ELSE C.GEO_STATE_KEY END)					AS GEO_STATE_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_STATE_CD ELSE C.GEO_STATE_CD END)						AS GEO_STATE_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_DSTRCT_KEY ELSE C.GEO_DSTRCT_KEY END)					AS GEO_DSTRCT_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_DSTRCT_CD ELSE C.GEO_DSTRCT_CD END)					AS GEO_DSTRCT_CD,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_CITY_KEY ELSE C.GEO_CITY_KEY END)						AS GEO_CITY_KEY,
						(CASE WHEN C.CELL_ID IS NULL  THEN E.GEO_CITY_CD ELSE C.GEO_CITY_CD END)						AS GEO_CITY_CD,
						D.ACQSTN_DT 			AS ACQSTN_DT,
						D.ACQSTN_BSNS_OUTLET_KEY AS ACQSTN_BSNS_OUTLET_KEY,
						D.ACQSTN_BSNS_OUTLET_CD AS ACQSTN_BSNS_OUTLET_CD,
						D.LOYALTY_RANK_SCORE 	AS LOYALTY_RANK_SCORE,
						D.LOYALTY_SCORE_DT 		AS LOYALTY_SCORE_DT,
						D.CREDIT_SCORE 			AS CREDIT_SCORE,
						D.CREDIT_CLASS_CD 		AS CREDIT_CLASS_CD,
						D.CREDIT_SCORE_METHOD 	AS CREDIT_SCORE_METHOD,
						D.CREDIT_SCORE_DT 		AS CREDIT_SCORE_DT,
						D.RISK_IND 				AS RISK_IND,
						CAST(NULL AS STRING)	AS ACCT_SEGMENT_CD,
						CAST(NULL AS STRING) 	AS ACCT_SEGMENT_DT,
						CAST(NULL AS STRING) 	AS CMPGN_CD,
						11						AS 	SRC_SYS_KEY,
						'iVMS'					AS 	SRC_SYS_CD,
						current_timestamp()		AS	LOAD_DT,
						'1' 					AS		CURR_IND,
						1 						AS		WRHS_ID
				FROM
				(
					SELECT *,
					ROW_NUMBER() OVER(PARTITION BY BB.ACC_REF,BB.SCNUM ORDER BY ABS(UNIX_TIMESTAMP(BB.DT_USE,'dd/MM/yyyy HH:mm:ss') - UNIX_TIMESTAMP(CC.STOCK_TRANS_DATE,'yyyy-MM-dd HH:mm:ss')),
																					UNIX_TIMESTAMP(BB.DT_USE,'dd/MM/yyyy HH:mm:ss') - UNIX_TIMESTAMP(CC.STOCK_TRANS_DATE,'yyyy-MM-dd HH:mm:ss')) AS ROW_NUM_2
							
					FROM 
					(SELECT *,SUBSTRING(LPAD(AA.SCNUM,19,'0'), 1, 11) BATCH_NUMBER,
						ROW_NUMBER() OVER(PARTITION BY aa.ACC_REF,aa.SCNUM ORDER BY ABS(UNIX_TIMESTAMP(aa.DT_USE,'dd/MM/yyyy HH:mm:ss') - W.TIME_SW),
																					UNIX_TIMESTAMP(aa.DT_USE,'dd/MM/yyyy HH:mm:ss') - W.TIME_SW) AS ROW_NUM_1
							
						FROM
						SCRATCH_ENRICH_TMP AA
						LEFT JOIN
						(
							SELECT UNIX_TIMESTAMP(RCHRG_EVT_DT,'yyyy-MM-dd HH:mm:ss') AS TIME_SW,EVT_TYP_CD,RCHRG_CHNL_TYP_CD,VCHR_SRL_NBR,FACE_VALUE_AMT,SERVICE_NBR
							FROM  
							MBF_BIGDATA.ADME_WALLET_RECHARGE_EDR WHERE DAY_KEY ='$day_key' 
						) W ON W.SERVICE_NBR = AA.ACC_REF and W.RCHRG_CHNL_TYP_CD IS NOT NULL  AND AA.AMOUNT = W.FACE_VALUE_AMT AND W.VCHR_SRL_NBR = AA.SCNUM
					
					) BB
					LEFT JOIN 
					(
						SELECT SUBSTRING(LPAD(FROM_SERIAL,19,'0'), 1, 11) BATCH_NUMBER, FROM_SERIAL , TO_SERIAL , STOCK_TRANS_DATE, SHOP_CODE, 'SCRATCH_SALE_VW' AS S_TYPE FROM MBF_DATALAKE.SCRATCH_SALE_VW WHERE DAY_KEY = '$day_key'
						UNION ALL
						SELECT SUBSTRING(LPAD(FROM_SERIAL,19,'0'), 1, 11) BATCH_NUMBER,FROM_SERIAL , TO_SERIAL , STOCK_TRANS_DATE, SHOP_CODE, 'TMT_SERIAL_EXPORT' AS S_TYPE FROM MBF_DATALAKE.TMT_SERIAL_EXPORT WHERE DAY_KEY = '$day_key'
					)CC ON BB.BATCH_NUMBER = CC.BATCH_NUMBER AND  CAST(BB.SCNUM AS BIGINT) >= CAST(CC.FROM_SERIAL AS BIGINT) AND CAST(BB.SCNUM AS BIGINT)  <= CAST(CC.TO_SERIAL AS BIGINT)
					LEFT JOIN 
					(
					SELECT SERIAL_FROM FROM_SERIAL_SCR, SERIAL_TO TO_SERIAL_SCR,'THE_CAO' AS SCR_TYPE FROM MBF_DATALAKE.SCR_THE_CAO WHERE CAST(DAY_KEY AS INTEGER) <= CAST('$day_key' AS INTEGER) 
					UNION ALL
					SELECT SERIAL_FROM FROM_SERIAL_SCR, SERIAL_TO TO_SERIAL_SCR,'MA_THE' AS SCR_TYPE FROM MBF_DATALAKE.SCR_MA_THE WHERE CAST(DAY_KEY AS INTEGER) <= CAST('$day_key' AS INTEGER)
					) DD ON CAST(BB.SCNUM AS BIGINT) >= CAST(DD.FROM_SERIAL_SCR AS BIGINT) AND CAST(BB.SCNUM AS BIGINT)  <= CAST(DD.TO_SERIAL_SCR AS BIGINT)
					WHERE BB.ROW_NUM_1 = 1
				) C
				LEFT JOIN MBF_BIGDATA.ADMR_ACCOUNT_SERVICE D ON C.ACC_REF = D.SERVICE_NBR AND D.DAY_KEY = '$day_key'
				LEFT JOIN 
				(select *, 
				ROW_NUMBER() OVER(PARTITION BY BSNS_OUTLET_CD ORDER BY BSNS_OUTLET_CD DESC NULLS LAST) AS ROW_NUM
				from 
				MBF_BIGDATA.ADMR_BUSINESS_OUTLET WHERE DAY_KEY = '$day_key') G ON G.BSNS_OUTLET_CD = C.SHOP_CODE AND G.ROW_NUM = 1
				LEFT JOIN MBF_BIGDATA.ADMD_SERVICE_TWIN_CLM_ACTVTY S ON C.ACC_REF = S.SERVICE_NBR AND C.CELL_ID IS NULL AND S.DAY_KEY = DATE_FORMAT(DATE_ADD(FROM_UNIXTIME(UNIX_TIMESTAMP('$day_key','yyyyMMdd')),-1),'yyyyMMdd')
				LEFT JOIN MBF_BIGDATA.ADMR_CELL E ON E.CELL_ID = S.LAST_ACTIVITY_CELL_KEY AND E.DAY_KEY = DATE_FORMAT(DATE_ADD(FROM_UNIXTIME(UNIX_TIMESTAMP('$day_key','yyyyMMdd')),-1),'yyyyMMdd')
				WHERE C.ROW_NUM_2 = 1	
				",
		"tempTable"  : "ADME_RATED_OCS_SCRATCH_TMP",
		"countSourceRecord":"0"
	  }   	  
	]

}