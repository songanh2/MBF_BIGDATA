{
	 "description":"ADME_RATED_ADDON_CHARGE_EDR",
	 "sqlStatements": [
	  {
		"sql"      : "
						SELECT * FROM
						(
						  SELECT 
							ROW_NUMBER() OVER (PARTITION BY C4.CELL_KEY_4G ORDER BY C4.cell_gci_cd DESC) AS ROWNUM, C4.* 
						  FROM 
						  (
							SELECT      
							  CASE WHEN CELL_TYP_CD = '4G' THEN CONCAT(SPLIT(CELL_KEY,'[\\-]')[0],'-',SPLIT(CELL_KEY,'[\\-]')[1],'-',SPLIT(CELL_KEY,'[\\-]')[3],'-',SPLIT(CELL_KEY,'[\\-]')[4])
							  ELSE CELL_KEY END AS CELL_KEY_4G,
							  *
							FROM MBF_BIGDATA.ADMR_CELL WHERE DAY_KEY = '$day_key' AND CELL_DSCR NOT LIKE '%TEST%'
						  ) C4
						) X WHERE X.ROWNUM = 1
					",
		"tempTable" : "CELL_4G_STD",
		"countSourceRecord" : "0",
		"description": "STG_CDR_IN_ENRICH enrich du lieu NON_CELL ca tu nguon flexi, cell_4G tren flexi co dang mcc-mnc-nodebid-cell, nen khi join cell_4g vao admr_cell phai bo TAC"
	  },	 
	  {
		"sql"      : "
						SELECT 
								CAST (FROM_UNIXTIME(UNIX_TIMESTAMP(A.CALL_STA_TIME,'dd/MM/yyyy HH:mm:ss'),'yyyyMM') AS INTEGER) 				 						AS MO_KEY,
								CAST(FROM_UNIXTIME(UNIX_TIMESTAMP(A.CALL_STA_TIME,'dd/MM/yyyy HH:mm:ss'),'yyyy-MM-dd HH:mm:ss') AS TIMESTAMP)		 					AS CHRG_EDR_DT,
								CAST(STT AS STRING)											 																			AS UUID,
								CAST(NULL AS STRING)										 																			AS REF_SERVICE_ORDER_CD,
								B.ACCT_SRVC_INSTANCE_KEY,
								CASE WHEN LENGTH(NVL(A.ORG_CALL_ID,'')) <> 0
										THEN
										CASE
											WHEN SUBSTR(A.ORG_CALL_ID, 1, 4) = '0001'
											THEN
												SUBSTR(A.ORG_CALL_ID, 5)
											ELSE
												CAST(CAST(A.ORG_CALL_ID AS INT) AS STRING)
										END
									ELSE A.CALLING_ISDN_STD 	
								END											 																							AS SERVICE_NBR,
								B.ACCT_KEY,
								B.BILLABLE_ACCT_KEY,
								B.CUST_KEY,
								B.CUST_TYP_CD,
								B.NTWK_QOS_GRP_CD											 																			AS NTWK_QOS_GRP_CD,
								B.ACTIVATION_DT 											 																			AS ACCT_ACTIVATION_DT,
								B.CBS_ACTIVATION_DT 										 																			AS ACCT_CBS_ACTIVATION_DT,
								B.LFCYCL_STAT_CD 											 																			AS ACCT_LFCYCL_STAT_CD,
								B.ACTIVATION_DT 											 																			AS SRVC_ACTIVATION_DT,
								B.CBS_ACTIVATION_DT 										 																			AS SRVC_CBS_ACTIVATION_DT,
								B.LFCYCL_STAT_CD 											 																			AS SRVC_LFCYCL_STAT_CD,
								B.ACQSTN_BSNS_OUTLET_KEY,
								B.ACQSTN_BSNS_OUTLET_CD,
								B.PROD_LINE_KEY,
								B.USAGE_PLAN_KEY,
								B.USAGE_PLAN_CD,
								B.USAGE_PLAN_TYP_CD,
								
								NVL(C.CELL_KEY,C4G.CELL_KEY) 				 																							AS CELL_KEY,
								NVL(C.CELL_CD,C4G.CELL_CD) 				 																								AS CELL_CD,
								NVL(C.CELL_SITE_KEY,C4G.CELL_SITE_KEY) 		 																							AS CELL_SITE_KEY,
								NVL(C.CELL_SITE_CD,C4G.CELL_SITE_CD)			 																						AS CELL_SITE_CD,								
								NVL(C.NTWK_MGNT_CENTRE_KEY,C4G.NTWK_MGNT_CENTRE_KEY) 	 																				AS NTWK_MGNT_CENTRE_KEY,
								NVL(C.NTWK_MGNT_CENTRE_CD,C4G.NTWK_MGNT_CENTRE_CD) 	 																					AS NTWK_MGNT_CENTRE_CD,
								NVL(C.BSNS_RGN_KEY,C4G.BSNS_RGN_KEY) 			 																						AS BSNS_RGN_KEY,
								NVL(C.BSNS_RGN_CD,C4G.BSNS_RGN_CD) 			 																							AS BSNS_RGN_CD,
								NVL(C.BSNS_CLUSTER_KEY,C4G.BSNS_CLUSTER_KEY) 		 																					AS BSNS_CLUSTER_KEY,
								NVL(C.BSNS_CLUSTER_CD,C4G.BSNS_CLUSTER_CD) 		 																						AS BSNS_CLUSTER_CD,
								NVL(C.BSNS_MINICLUSTER_KEY,C4G.BSNS_MINICLUSTER_KEY) 	 																				AS BSNS_MINICLUSTER_KEY,
								NVL(C.BSNS_MINICLUSTER_CD,C4G.BSNS_MINICLUSTER_CD) 	 																					AS BSNS_MINICLUSTER_CD,
								NVL(C.GEO_CNTRY_KEY,C4G.GEO_CNTRY_KEY) 		 																							AS GEO_CNTRY_KEY,
								NVL(C.GEO_CNTRY_CD,C4G.GEO_CNTRY_CD) 			 																						AS GEO_CNTRY_CD,
								NVL(C.GEO_STATE_KEY,C4G.GEO_STATE_KEY) 		 																							AS GEO_STATE_KEY,
								NVL(C.GEO_STATE_CD,C4G.GEO_STATE_CD) 			 																						AS GEO_STATE_CD,
								NVL(C.GEO_DSTRCT_KEY,C4G.GEO_DSTRCT_KEY) 		 																						AS GEO_DSTRCT_KEY,
								NVL(C.GEO_DSTRCT_CD,C4G.GEO_DSTRCT_CD) 		 																							AS GEO_DSTRCT_CD,
								NVL(C.GEO_CITY_KEY,C4G.GEO_CITY_KEY) 			 																						AS GEO_CITY_KEY,
								NVL(C.GEO_CITY_CD,C4G.GEO_CITY_CD) 			 																							AS GEO_CITY_CD,	
								
								CAST(NVL(A.TREE_ID,157) AS BIGINT)									 			 														AS PROD_KEY,
								D.PROD_CD									 			 																				AS PROD_CD,
								A.ITEM_ID																																AS ITEM_KEY,
								A.SUB_ITEM_ID																															AS SUB_ITEM_CD,
								
								'UNKNOWN' 													 																			AS EVT_CLASS_CD,
								'UNKNOWN' 													 																			AS EVT_CTGRY_CD,
								NVL(A.CALL_TYP_CD, 'UNKNOWN') 							     																			AS EVT_TYP_CD,
								CAST(NULL AS INTEGER)										 																			AS BILL_CYCLE_KEY,
								CAST(NULL AS INTEGER)										 																			AS CHRG_HEAD_KEY,
								CAST(NULL AS STRING)										 																			AS CHRG_HEAD_CD,
								CAST(NULL AS STRING)										 																			AS CHRG_TYP_CD,
								'VND' 														 																			AS CRNCY_CD,
								CAST(NULL AS DECIMAL(27,8)) 								 																			AS CHRG_AMT,
								CAST(NULL AS DECIMAL(27,8)) 								 																			AS DEBIT_ADJ_AMT,
								CAST(NULL AS DECIMAL(27,8)) 								 																			AS CREDIT_ADJ_AMT,
								CAST(NULL AS DECIMAL(27,8)) 								 																			AS TAX_AMT,
								CAST(A.CREDIT_CHARGED + (CASE WHEN W1.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK1_CONSUMED ELSE 0 END) + 
								(CASE WHEN W2.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK2_CONSUMED ELSE 0 END) +
								(CASE WHEN W3.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK3_CONSUMED ELSE 0 END) +
								(CASE WHEN W4.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK4_CONSUMED ELSE 0 END) +
								(CASE WHEN W5.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK5_CONSUMED ELSE 0 END) +
								(CASE WHEN W6.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK6_CONSUMED ELSE 0 END) +
								(CASE WHEN W7.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK7_CONSUMED ELSE 0 END) +
								(CASE WHEN W8.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK8_CONSUMED ELSE 0 END) +
								(CASE WHEN W9.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK9_CONSUMED ELSE 0 END) +
								(CASE WHEN W10.WALLET_TYP_CD IN ('MAIN_BALANCE','SECONDARY_MAIN_BALANCE') THEN A.TK10_CONSUMED ELSE 0 END) AS DECIMAL(27,8)) 			AS BLLD_AMT,
								CAST(A.CREDIT_CHARGED AS DECIMAL(27,8)) 					 																			AS RVN_AMT,
								CAST(NULL AS DECIMAL(27,8)) 					 																						AS DISPUTE_AMT,
								CAST((CASE WHEN W1.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK1_CONSUMED ELSE 0 END) + 
								(CASE WHEN W2.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK2_CONSUMED ELSE 0 END) +
								(CASE WHEN W3.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK3_CONSUMED ELSE 0 END) +
								(CASE WHEN W4.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK4_CONSUMED ELSE 0 END) +
								(CASE WHEN W5.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK5_CONSUMED ELSE 0 END) +
								(CASE WHEN W6.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK6_CONSUMED ELSE 0 END) +
								(CASE WHEN W7.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK7_CONSUMED ELSE 0 END) +
								(CASE WHEN W8.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK8_CONSUMED ELSE 0 END) +
								(CASE WHEN W9.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK9_CONSUMED ELSE 0 END) +
								(CASE WHEN W10.WALLET_TYP_CD IN ('SECONDARY_MAIN_BALANCE') THEN A.TK10_CONSUMED ELSE 0 END) AS DECIMAL(27,8)) 							AS DISCOUNT_AMT,
								CAST(NULL AS STRING)										 																			AS CHRG_WAIVED_IND,
								CASE WHEN A.ACC_PROFILE NOT LIKE 'TS%' THEN CAST(A.CREDIT_CHARGED AS  DECIMAL(27,8)) ELSE CAST(0 AS DECIMAL(27,8)) END 					AS PREPAID_MAIN_ACCT_DECRMNT_AMT,
								CASE WHEN A.ACC_PROFILE LIKE 'TS%' THEN  CAST(A.CREDIT_CHARGED AS  DECIMAL(27,8)) ELSE  CAST(0 AS DECIMAL(27,8)) END 					AS POSTPAID_MAIN_ACCT_DECRMNT_AMT,
								CAST(NULL AS DECIMAL(27,8)) 								 																			AS MAIN_ACCT_BAL_AMT_BEFR_IMPACT,
								CAST(NULL AS DECIMAL(27,8)) 								 																			AS MAIN_ACCT_BAL_AMT_AFTR_IMPACT,
								W1.WALLET_KEY												 																			AS WALLET1_KEY,
								CAST(A.TK1_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET1_BAL_DECRMNT_AMT,
								W2.WALLET_KEY												 																			AS WALLET2_KEY,
								CAST(A.TK2_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET2_BAL_DECRMNT_AMT,
								W3.WALLET_KEY												 																			AS WALLET3_KEY,
								CAST(A.TK3_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET3_BAL_DECRMNT_AMT,
								W4.WALLET_KEY												 																			AS WALLET4_KEY,
								CAST(A.TK4_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET4_BAL_DECRMNT_AMT,
								W5.WALLET_KEY												 																			AS WALLET5_KEY,
								CAST(A.TK5_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET5_BAL_DECRMNT_AMT,
								W6.WALLET_KEY												 																			AS WALLET6_KEY,
								CAST(A.TK6_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET6_BAL_DECRMNT_AMT,
								W7.WALLET_KEY 												 																			AS WALLET7_KEY,
								CAST(A.TK7_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET7_BAL_DECRMNT_AMT,
								W8.WALLET_KEY												 																			AS WALLET8_KEY,
								CAST(A.TK8_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET8_BAL_DECRMNT_AMT,
								W9.WALLET_KEY												 																			AS WALLET9_KEY,
								CAST(A.TK9_CONSUMED AS DECIMAL(27,8)) 						 																			AS WALLET9_BAL_DECRMNT_AMT,
								W10.WALLET_KEY												 																			AS WALLET10_KEY,
								CAST(A.TK10_CONSUMED AS DECIMAL(27,8))						 																			AS WALLET10_BAL_DECRMNT_AMT,
								B.LOYALTY_RANK_SCORE,
								B.LOYALTY_SCORE_DT,
								B.CREDIT_SCORE,
								B.CREDIT_CLASS_CD,
								B.CREDIT_SCORE_METHOD,
								B.CREDIT_SCORE_DT,
								B.RISK_IND,
								CAST(NULL AS STRING)										 																			AS ACCT_SEGMENT_CD,
								CAST(NULL AS STRING)										 																			AS ACCT_SEGMENT_DT,
								CAST(NULL AS STRING)										 																			AS CMPGN_CD,
								CAST(6 AS BIGINT) 																														AS SRC_SYS_KEY,
								'ICC' 																																	AS SRC_SYS_CD,
								CURRENT_TIMESTAMP() 																													AS LOAD_DT,
								'1' CURR_IND,
								1 WRHS_ID
						FROM 
						(SELECT CDR.* , MT.TREE_ID,
								ROW_NUMBER () OVER (PARTITION BY CDR.CALL_STA_TIME,CDR.CALLING_ISDN,CDR.TRANSACTION_DESCRIPTION, CDR.ftp_filename, CDR.stt,CDR.ITEM_ID,CDR.SUB_ITEM_ID, mt.ITEM_ID_DTTT, mt.SUB_ITEM_ID ORDER BY mt.INCLUDE_SUB_ITEM_ID DESC, mt.EFFECT_FROM DESC) ROW_NUM_SUB,
								ROW_NUMBER () OVER (PARTITION BY CDR.CALL_STA_TIME,CDR.CALLING_ISDN,CDR.TRANSACTION_DESCRIPTION, CDR.ftp_filename, CDR.stt,CDR.ITEM_ID,CDR.SUB_ITEM_ID,mt.ITEM_ID_DTTT ORDER BY mt.EFFECT_FROM DESC) ROW_NUM
							
							FROM
							(
							SELECT * FROM MBF_STAGE.STG_CDR_IN_ENRICH 
							WHERE
								((DAY_KEY='$day_key' AND NOT	
								(
								(CALL_TYPE_IND = 'OG' AND CALL_TYPE IN (1,5,20) OR CALL_TYPE_IND = 'IC') 
								 OR (CALL_TYPE IN (301,302))
								 OR (CALL_TYPE_IND = 'SMO' AND CALL_TYPE = 21)
								 OR (CALL_TYPE_IND = 'GPRS' AND CALL_TYPE = 189)
								 OR (CALL_TYPE_IND = 'OTHER' AND CALL_TYPE IN (176, 177, 184, 186))
								 OR (CALL_TYPE_IND = 'OTHER' AND CALL_TYPE IN (164,464,360))
								 OR (CALL_TYPE IN (193, 209, 179, 320))
								 OR (CALL_TYPE = 415 AND (NVL(TRANSACTION_DESCRIPTION,'') LIKE 'UT%' AND CAST(SUBSTRING(SCRATCH_VALUE,1,LENGTH(SCRATCH_VALUE)-2) AS INT) > 0)  OR NVL(TRANSACTION_DESCRIPTION,'') LIKE '%HU%')	
								))
								OR (DAY_KEY='$day_key' AND CALL_TYPE_IND = 'UNKNOWN'))
							) CDR 
							LEFT OUTER JOIN MBF_DATALAKE.MAP_TREE MT
								ON FROM_UNIXTIME(UNIX_TIMESTAMP(CONCAT(SUBSTRING(mt.EFFECT_FROM,0,4),SUBSTRING(mt.EFFECT_FROM,6,2),'01'), 'yyyyMMdd')) <= FROM_UNIXTIME(UNIX_TIMESTAMP('$day_key', 'yyyyMMdd'))
								AND FROM_UNIXTIME(UNIX_TIMESTAMP('$day_key', 'yyyyMMdd')) < CASE WHEN (mt.EFFECT_UNTIL IS NULL OR mt.EFFECT_UNTIL = '') THEN FROM_UNIXTIME(UNIX_TIMESTAMP('$day_key', 'yyyyMMdd')+1) 
								ELSE DATE_ADD(LAST_DAY(FROM_UNIXTIME(UNIX_TIMESTAMP(CONCAT(SUBSTRING(mt.EFFECT_UNTIL,0,4),SUBSTRING(mt.EFFECT_UNTIL,6,2),'01') , 'yyyyMMdd'))),1)  END
								AND NVL (mt.ITEM_ID_DTTT, '-1') = NVL (CDR.ITEM_ID, '-1')
								AND ((mt.INCLUDE_SUB_ITEM_ID = '1' AND NVL (UPPER(mt.SUB_ITEM_ID), '-1') = NVL (UPPER (CDR.SUB_ITEM_ID), '-1')) OR mt.INCLUDE_SUB_ITEM_ID = '0')
							
							LEFT JOIN MBF_BIGDATA.ADMR_OFFER B
								ON B.DAY_KEY = '$day_key' AND UPPER(B.OFFER_CD) = UPPER(CDR.TRANSACTION_DESCRIPTION)
							WHERE B.OFFER_CD IS NULL) A
						LEFT JOIN 
						(SELECT * FROM MBF_BIGDATA.ADMR_ACCOUNT_SERVICE WHERE DAY_KEY = '$day_key') B
						ON B.SERVICE_NBR = (CASE WHEN LENGTH(NVL(A.ORG_CALL_ID,'')) <> 0
													THEN
													CASE
														WHEN SUBSTR(A.ORG_CALL_ID, 1, 4) = '0001'
														THEN
															SUBSTR(A.ORG_CALL_ID, 5)
														ELSE
															CAST(CAST(A.ORG_CALL_ID AS INT) AS STRING)
													END
												ELSE A.CALLING_ISDN_STD 	
											END	)
						LEFT JOIN 
						(SELECT * FROM MBF_BIGDATA.ADMR_CELL WHERE DAY_KEY = '$day_key') C ON A.CELL_ID = C.CELL_GCI_CD
						LEFT JOIN MBF_BIGDATA.ADMR_PRODUCT D ON D.PROD_KEY = NVL(A.TREE_ID,'157') AND D.DAY_KEY = '$day_key'							
						
						LEFT JOIN CELL_4G_STD C4G ON A.CELL_ID = C4G.CELL_GCI_CD
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W1 ON ((W1.ROW_NUM1 = 1 AND W1.WALLET_CBS_CD = LOWER(A.TK1) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W1.ROW_NUM = 1 AND W1.WALLET_CBS_CD = LOWER(TK1) AND A.CALL_TYPE_IND = 'OG' AND W1.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W2 ON ((W2.ROW_NUM1 = 1 AND W2.WALLET_CBS_CD = LOWER(A.TK2) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W2.ROW_NUM = 1 AND W2.WALLET_CBS_CD = LOWER(TK2) AND A.CALL_TYPE_IND = 'OG' AND W2.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W3 ON ((W3.ROW_NUM1 = 1 AND W3.WALLET_CBS_CD = LOWER(A.TK3) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W3.ROW_NUM = 1 AND W3.WALLET_CBS_CD = LOWER(TK3) AND A.CALL_TYPE_IND = 'OG' AND W3.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W4 ON ((W4.ROW_NUM1 = 1 AND W4.WALLET_CBS_CD = LOWER(A.TK4) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W4.ROW_NUM = 1 AND W4.WALLET_CBS_CD = LOWER(TK4) AND A.CALL_TYPE_IND = 'OG' AND W4.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W5 ON ((W5.ROW_NUM1 = 1 AND W5.WALLET_CBS_CD = LOWER(A.TK5) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W5.ROW_NUM = 1 AND W5.WALLET_CBS_CD = LOWER(TK5) AND A.CALL_TYPE_IND = 'OG' AND W5.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W6 ON ((W6.ROW_NUM1 = 1 AND W6.WALLET_CBS_CD = LOWER(A.TK6) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W6.ROW_NUM = 1 AND W6.WALLET_CBS_CD = LOWER(TK6) AND A.CALL_TYPE_IND = 'OG' AND W6.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W7 ON ((W7.ROW_NUM1 = 1 AND W7.WALLET_CBS_CD = LOWER(A.TK7) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W7.ROW_NUM = 1 AND W7.WALLET_CBS_CD = LOWER(TK7) AND A.CALL_TYPE_IND = 'OG' AND W7.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W8 ON ((W8.ROW_NUM1 = 1 AND W8.WALLET_CBS_CD = LOWER(A.TK8) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W8.ROW_NUM = 1 AND W8.WALLET_CBS_CD = LOWER(TK8) AND A.CALL_TYPE_IND = 'OG' AND W8.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W9 ON ((W9.ROW_NUM1 = 1 AND W9.WALLET_CBS_CD = LOWER(A.TK9) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W9.ROW_NUM = 1 AND W9.WALLET_CBS_CD = LOWER(TK9) AND A.CALL_TYPE_IND = 'OG' AND W9.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))
						LEFT JOIN (SELECT * FROM MBF_BIGDATA.ADMR_WALLET WHERE DAY_KEY = '$day_key') W10 ON ((W10.ROW_NUM1 = 1 AND W10.WALLET_CBS_CD = LOWER(A.TK10) AND A.CALL_TYPE_IND IN ('OTHER', 'UNKNOWN'))  OR (W10.ROW_NUM = 1 AND W10.WALLET_CBS_CD = LOWER(TK10) AND A.CALL_TYPE_IND = 'OG' AND W10.USAGE_TYP_CD IN ('VOICE' ,'CONVERGENT')))		       
						WHERE A.ROW_NUM_SUB = 1 AND A.ROW_NUM = 1
					",
		"tempTable" : "ADME_RATED_ADDON_CHARGE_EDR_TMP",
		"countSourceRecord" : "1"
	  }
	]
}